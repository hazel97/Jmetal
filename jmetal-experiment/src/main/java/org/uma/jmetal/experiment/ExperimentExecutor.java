package org.uma.jmetal.experiment;

import org.uma.jmetal.experiment.ExperimentExecutor.AlgorithmExecution.RunStatus;

/**
 * An {@link ExperimentExecutor} manages the execution of algorithms, like
 * parallelism. Each algorithm to execute must be registered through
 * {@link #add(Object)}, which returns an {@link AlgorithmExecution} providing
 * various information about the execution of this algorithm and allows to
 * interact with it.
 * 
 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
 * 
 */
public interface ExperimentExecutor<Algorithm> {
	/**
	 * Request the {@link ExperimentExecutor} to manage the execution of an
	 * {@link Algorithm}. The {@link AlgorithmExecution} returned provides the
	 * very same algorithm instance through
	 * {@link AlgorithmExecution#getAlgorithm()}.
	 * 
	 * @param algorithm
	 *            the {@link Algorithm} to run
	 * @return the {@link AlgorithmExecution} corresponding to this run
	 */
	public AlgorithmExecution<Algorithm> add(Algorithm algorithm);

	/**
	 * An {@link AlgorithmExecution} corresponds to a single execution of an
	 * algorithm.
	 * 
	 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
	 * 
	 */
	public interface AlgorithmExecution<Algorithm> extends Runnable {

		/**
		 * 
		 * @return the algorithm which should be executed
		 */
		public Algorithm getAlgorithm();

		/**
		 * Run the algorithm. This method can be called only once.
		 * 
		 * @throws AlreadyRunException
		 *             when the {@link #run()} method is called more than once.
		 */
		@Override
		public void run() throws AlreadyRunException;

		/**
		 * A {@link RunStatus} tells in which state an
		 * {@link AlgorithmExecution} is.
		 * 
		 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
		 * 
		 */
		public static enum RunStatus {
			/**
			 * The method {@link ExperimentRun#run()} has not been called yet.
			 */
			WAITING,
			/**
			 * The method {@link ExperimentRun#run()} has been called but has
			 * not returned yet.
			 */
			RUNNING,
			/**
			 * The method {@link ExperimentRun#run()} has been called but
			 * something has interrupted it with the aim to restart later.
			 */
			PAUSED,
			/**
			 * The method {@link ExperimentRun#run()} has been called but
			 * something has interrupted it definitively.
			 */
			INTERRUPTED,
			/**
			 * The method {@link ExperimentRun#run()} has been called and has
			 * returned.
			 */
			TERMINATED
		}

		/**
		 * 
		 * @return the current {@link RunStatus} of this
		 *         {@link AlgorithmExecution}
		 */
		public RunStatus getRunStatus();

		/**
		 * 
		 * @param listener
		 *            the {@link AlgorithmExecutionListener} to register
		 */
		public void addRunListener(AlgorithmExecutionListener listener);

		/**
		 * 
		 * @param listener
		 *            the {@link AlgorithmExecutionListener} to unregister
		 */
		public void removeRunListener(AlgorithmExecutionListener listener);

		/**
		 * An {@link AlgorithmExecutionListener} allows to be notified about any
		 * change in the {@link RunStatus} of an {@link AlgorithmExecution}.
		 * 
		 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
		 * 
		 */
		public static interface AlgorithmExecutionListener {
			/**
			 * 
			 * @param newStatus
			 *            the new {@link RunStatus} of the
			 *            {@link AlgorithmExecution}
			 */
			public void hasChangedStatus(RunStatus newStatus);
		}

		@SuppressWarnings("serial")
		public static class AlreadyRunException extends RuntimeException {
			public AlreadyRunException(AlgorithmExecution<?> execution) {
				super("The execution " + execution + " is already done.");
			}
		}
	}

	/**
	 * Start this {@link ExperimentExecutor}. All {@link AlgorithmExecution}
	 * generated by this {@link ExperimentExecutor} should be in a
	 * {@link RunStatus#WAITING} status before to call this method. The method
	 * can be called only once.
	 * 
	 * @throws AlreadyStartedException
	 *             if the method has already been called
	 */
	public void start() throws AlreadyStartedException;

	/**
	 * 
	 * @return <code>true</code> if {@link #start()} has been called,
	 *         <code>false</code> otherwise
	 */
	public boolean isStarted();

	@SuppressWarnings("serial")
	public static class AlreadyStartedException extends RuntimeException {

		public AlreadyStartedException(ExperimentExecutor<?> executor) {
			super("The executor " + executor + " has already been started.");
		}
	}
}
