package org.uma.jmetal.solution;

/**
 * A {@link SolutionBuilder} allows to generate a {@link Solution} by setting
 * its fundamental information, in other words by providing the values of its
 * {@link Variable}s.
 * 
 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
 * 
 * @param <Solution>
 */
public interface SolutionBuilder<Solution> {

	/**
	 * This method tells which value to assign to the next {@link Solution},
	 * generated by {@link #build()}, for a given {@link Variable}. Once all the
	 * required {@link Variable}s are prepared, {@link #build()} can be called
	 * to generate the {@link Solution}. If this method is called several time
	 * on the same {@link Variable} before to call {@link #build()}, the last
	 * prepared value should be considered.
	 * 
	 * @param variable
	 *            the {@link Variable} to consider
	 * @param value
	 *            the value to prepare for this {@link Variable}
	 * @throws UnmanagedVariableException
	 *             if the {@link Variable} is not managed by this
	 *             {@link SolutionBuilder}
	 * @throws InvalidVariableValueException
	 *             if the value provided is invalid for the given
	 *             {@link Variable}
	 */
	public <Value> void set(Variable<Solution, Value> variable, Value value)
			throws UnmanagedVariableException, InvalidVariableValueException;

	/**
	 * This method generates a valid {@link Solution} based on all the values
	 * prepared by calling {@link #set(Variable, Object)}. The notion of "valid"
	 * {@link Solution} is builder-dependent: some builders may accept to build
	 * a partial (or even empty) {@link Solution} while others not, some may
	 * simply ensure that all {@link Variable}s are set while others may perform
	 * deeper checks. If the {@link Variable}s are set in an invalid way, this
	 * method will return an exception.<br>
	 * <br>
	 * Calling this method twice in a row should generate two equivalent
	 * {@link Solution}s. To generate a different {@link Solution}, one should
	 * first call {@link #set(Variable, Object)} with the relevant
	 * {@link Variable}s and values or call {@link #reset()}.
	 * 
	 * @return a new {@link Solution} instance
	 * @throws UnableToBuildSolutionException
	 *             when the {@link Solution} cannot be built
	 */
	public Solution build() throws UnableToBuildSolutionException;

	/**
	 * Cancel any previous call of {@link #set(Variable, Object)}. Calling
	 * {@link #build()} after calling this function should be equivalent to
	 * calling {@link #build()} without calling any
	 * {@link #set(Variable, Object)}, like generating an empty {@link Solution}
	 * or throwing an exception because the {@link Solution} is invalid.
	 * 
	 */
	public void reset();

	/**
	 * This exception indicates that a {@link Variable} cannot be used, usually
	 * because the implementation has not be designed to deal with this
	 * {@link Variable} or because some restrictions have been set.
	 * 
	 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
	 *
	 */
	@SuppressWarnings("serial")
	public static class UnmanagedVariableException extends RuntimeException {
		public UnmanagedVariableException(Variable<?, ?> variable, Throwable throwable) {
			super("Variable " + variable + " not managed", throwable);
		}

		public UnmanagedVariableException(Variable<?, ?> variable) {
			this(variable, null);
		}
	}

	/**
	 * This exception arises when one attempts to assign an invalid value to a
	 * {@link Variable}, whether because the {@link Variable} does not expect
	 * this kind of value or because some restrictions have been set.
	 * 
	 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
	 *
	 */
	@SuppressWarnings("serial")
	public static class InvalidVariableValueException extends RuntimeException {
		public <Value> InvalidVariableValueException(Variable<?, Value> variable, Value value, Throwable throwable) {
			super("Variable " + variable + " does not accept value " + value, throwable);
		}

		public <Value> InvalidVariableValueException(Variable<?, Value> variable, Value value) {
			this(variable, value, null);
		}
	}

	/**
	 * This exception arises when one is not able to instantiate a
	 * {@link Solution}, usually because it is partially defined or because its
	 * {@link Variable}s are inconsistent.
	 * 
	 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
	 *
	 */
	@SuppressWarnings("serial")
	public static class UnableToBuildSolutionException extends RuntimeException {
		public UnableToBuildSolutionException(String message, Throwable throwable) {
			super(message, throwable);
		}

		public UnableToBuildSolutionException(String message) {
			this(message, null);
		}

		public UnableToBuildSolutionException() {
			this("Unable to build the solution");
		}
	}
}
